By Jixie, Aug 2015
Updated epc_or.f to use Oscar's FINAL scaling fit.
It was done long time ago, but I forgot to commit to the remote github. 

problem:
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
LOCB/LOCF: address 0x3554908a80 exceeds the 32 bit address space
or is not in the data segments                                 
This may result in program crash or incorrect results          
Therefore we will stop here                                    
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!    

Here are the 3 things Stephen Wood did to fix the above problem.

1.  Makefile_64: Use the CERN_ROOT environment variable to reference the libraries and include files. I removed the -m64 flag, so this makefile may also work on a 32 bit machine.

2.  gxcs.f: Added a missing "EXTERNAL GBRSGE".  Without that external, the second to last CSEXT was crashing.

3.  uginit.f: Put the address argument of every FFKEY call into a common block.


By Jixie, Dec 2014

1) Modified  generate_event() subroutine in gen_evt.f. 
   Fixed raster generator bug. The old version set raster r follow 
   y=sqrt(x) distribution. But this will not generate 
   uniform x,y distributions. Also fixed is the horizontal raster position
   in Lab frame, SRx. The bug was that it had a wrong sign.
  

2) Modified gen_evt.f gukine.f.  
   Cleaned up a lot of unused test code. 
   Removed common block variable ivpart. 
   Added a lot of useful comments.

3) There is a rejection method in gen_evt.f to shape the thrown events in
   a realistic distribution. However, this method need an input value 
   of the maximum XS. Currently this value is not right. Therefore I 
   commented this part out. This value varies from channel to channel.
   If one need to use this feature, he has to find out this value first  
   then uncomment this block.
///////////////////////////////////////////////////////////////////////////////////////////
! Comment Added by Jixie: the next few lines is trying to use rejection method to  
! require the thrown event match the realistic distribution
! please note that rrand should be a random number between 0 and maxXS, while
! this maxXS varies from channel to channel. It is very hard to hard code this number
! If this number is too large, it will cost too long to generate one event
! If this number is too small, the simulation will not generate a realistic distribution 
! For p(e,e')X,  maxXS=200
! For p(e,pi0)X, maxXS=3.7E6 
! If you are not sure what number maxXS should be, you should run the simulation with 
! small amount of thrown events then plot xsn to check
!
c      rrand =700*rand() 700 is maximal crossection (normrate) check xsn if it's more than 700 change it.
c
!       rrand =200*rand()
!       if(normrate.le.rrand)goto 700
///////////////////////////////////////////////////////////////////////////////////////////

4) Modified generate_event() subroutine in gen_evt.f.  The variable 
   deltaOmega is not calculate properly.

5) Modified gen_evt.f, guout.f to remove comment block variable phi_test.

6) Modified gukine.f, the vertex z was thrown wrongly.



-------------------------------------------------------------------------------

Updated Makefile to hardwire CERNLIB to /site/cernlib/i386_rhel5/2005/lib
Modify lucitehodo.f
     CALL GSPOS('HODO',1,'EARM',0.,0.,-424.+240.,  7,'ONLY')      

to

     CALL GSPOS('HODO',1,'EARM',0.,0.,-237.5+240.,  7,'ONLY') 

   
gukine.f 

     VERTEX(3) = uu(3)-182.5

to

     VERTEX(3) = uu(3)-237.5
 
forwardtracker.f

      CALL GSPOS('FTX1',1,'EARM',0,0,-182.+52.,0,'ONLY')
      CALL GSPOS('FTY1',1,'EARM',0,0,-182.+52.+0.3,0,'ONLY')   
      CALL GSPOS('FTY2',1,'EARM',0,0-0.15,-182.+52.+0.3*2.,0,'ONLY')
to

      CALL GSPOS('FTX1',1,'EARM',0,0,-237.5+52.,0,'ONLY')
      CALL GSPOS('FTY1',1,'EARM',0,0,-237.5+52.+0.3,0,'ONLY')   
      CALL GSPOS('FTY2',1,'EARM',0,0-0.15,-237.5+52.+0.3*2.,0,'ONLY')

also forward tracker


guout.f sets to output to ntuple with following cut:
         if(nclust.gt.0.and.abs(ph-90).lt.90.and.
     ,        abs(ph-phi_test).lt.0.01.and. cer_h(1).gt.0.and.
     ,        xsn.gt.0.and.cwn_E_r(1).gt.0.7)then

cer_h is the number of photo-electrons in cerenkov that
  geometrically match BigCal.


